generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  password      String
  phone         String?
  profileImage  String?
  bio           String?
  status        String       @default("offline")   // "online", "offline", "away", "busy"
  lastSeen      DateTime?
  lastActive    DateTime?    @default(now())       // Last activity timestamp
  isTyping      Boolean      @default(false)       // Typing status
  typingInChat  String?      // ChatId where user is typing
  deviceId      String?      // For handling multiple device sessions
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  messages      Message[]    @relation("UserMessages")
  participants  Participant[]
  receivedNotifications Notification[] @relation("UserNotifications")
  sentNotifications    Notification[] @relation("SentNotifications")
  contacts      User[]       @relation("UserContacts")
  contactOf     User[]       @relation("UserContacts")
  sentRequests     ContactRequest[] @relation("SentRequests")
  receivedRequests ContactRequest[] @relation("ReceivedRequests")
  theme           String    @default("dark")
  language        String    @default("en")
  notifications   Boolean   @default(true)
  soundEnabled    Boolean   @default(true)
  privacyLevel    String    @default("friends") // "public", "friends", "private"
  readReceipts    Boolean   @default(true)
  groups          Group[]   @relation("GroupMembers")
  ownedGroups     Group[]   @relation("GroupOwner")
  groupMessages   GroupMessage[]
  settings        UserSettings?
}

model Chat {
  id           String         @id @default(cuid())
  name         String?
  isGroup      Boolean        @default(false)
  avatar       String?
  lastActivity DateTime      @default(now())      // Track last chat activity
  activeUsers  String[]      @default([])         // Array of active user IDs in chat
  typingUsers  String[]      @default([])         // Array of currently typing user IDs
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  messages     Message[]      @relation("ChatMessages")
  participants Participant[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?
  createdAt DateTime @default(now())
  senderId  String
  chatId    String
  isRead    Boolean  @default(false)
  status    String   @default("sent") // 'sent', 'delivered', 'read'
  timestamp DateTime @default(now())  // Add this field
  sender    User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([chatId])
}

model Participant {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String    // CONTACT_REQUEST, MESSAGE, etc.
  content     String
  fromUserId  String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  user        User      @relation("UserNotifications", fields: [userId], references: [id])
  fromUser    User?     @relation("SentNotifications", fields: [fromUserId], references: [id])
}

model ContactRequest {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])

  @@unique([senderId, recipientId])
}

model Group {
  id          String         @id @default(cuid())
  name        String
  description String?
  avatar      String?
  isPublic    Boolean        @default(true)
  ownerId     String
  owner       User           @relation("GroupOwner", fields: [ownerId], references: [id])
  members     User[]         @relation("GroupMembers")
  messages    GroupMessage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([ownerId])
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  groupId   String
  senderId  String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([groupId])
  @@index([senderId])
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme             String   @default("dark")
  language          String   @default("en")
  notifications     Boolean  @default(true)
  soundEnabled      Boolean  @default(true)
  onlineStatus      Boolean  @default(true)
  readReceipts      Boolean  @default(true)
  privacyLevel      String   @default("friends")
  messageSounds     String   @default("default")
  callRingtone      String   @default("default")
  lastUpdated       DateTime @updatedAt

  @@index([userId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}